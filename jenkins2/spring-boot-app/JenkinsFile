pipeline {
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        //git branch: 'main', url: 'https://github.com/iam-veeramalla/Jenkins-Zero-To-Hero.git'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'cd jenkins2/spring-boot-app && mvn clean package'
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "parthitk/ultimate-cicd:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('docker-cred') // ensure credentials are set up in Jenkins
      }
      steps {
        script {
            sh 'cd jenkins2/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                dockerImage.push()
            }
        }
      }
    }
    stage('Create Container') {
      environment {
        DOCKER_IMAGE = "parthitk/ultimate-cicd:${BUILD_NUMBER}"
      }
      steps {
        script {
          sh 'docker run -d --name cont1 -p 9090:8080 ${DOCKER_IMAGE}' // Removed -it and used -d for detached mode.
        }
      }
    }
  }
  post {
    always {
        emailext (
            subject: "pipeline status : ${BUILD_NUMBER}",
            body: '''<html>
                      <body>
                        <p>Build status: ${BUILD_STATUS}</p>
                        <p>Build Number: ${BUILD_NUMBER}</p>
                        <p>Check the <a href="${BUILD_URL}">console output</a>.</p>
                      </body>
                    </html>''',
            to: 'parthitk2006@gmail.com',
            from: 'admin@gmail.com',
            replyTo: 'admin@gmail.com',
            mimeType: 'text/html'
        )
      }
    }
  }


